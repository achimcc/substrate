use codec::{Decode, Encode};
use scale_info::TypeInfo;
use sp_std::fmt::Debug;

/// An error describing which elliptic curve call failed.
#[derive(Clone, Copy, PartialEq, Eq, Encode, Decode, TypeInfo, Debug)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub enum EccError {
	// bls12_377 errors
	BLS12_377MUL_PROJECTIVE_G1,
	BLS12_377MUL_PROJECTIVE_G2,
	BLS12_377G1MSM,
	BLS12_377G2MSM,
	BLS12_377MULTI_MILLER_LOOP,
	BLS12_377FINAL_EXPONENTIATION,
	// bls12_381 errors
	BLS12_381G1PROJECTIVE,
	BLS12_381G2PROJECTIVE,
	BLS12_381G1MSM,
	BLS12_381G2MSM,
	BLS12_381MULTI_MILLER_LOOP,
	BLS12_381FINAL_EXPONENTIATION,
	// bw6_761 errors
	BW6_761G1PROJECTIVE,
	BW6_761G2PROJECTIVE,
	BW6_761G1MSM,
	BW6_761G2MSM,
	BW6_761MULTI_MILLER_LOOP,
	BW6_761FINAL_EXPONENTIATION,
	// ed_on_bls12_377 errors
	ED_ON_BLS12_377MUL_PROJECTIVE,
	ED_ON_BLS12_377MSM,
	// ed_on_bls12_381_bandersnatch errors
	ED_ON_BLS12_381_BANDERSNATCH_SW_MUL_PROJECTIVE,
	ED_ON_BLS12_381_BANDERSNATCH_TE_MUL_PROJECTIVE,
	ED_ON_BLS12_381_BANDERSNATCH_SW_MSM,
	ED_ON_BLS12_381_BANDERSNATCH_TE_MSM,
}
